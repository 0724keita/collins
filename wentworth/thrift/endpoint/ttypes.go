/* Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package endpoint;

import (
        "tumblr/3rdparty/thrift"
        "fmt"
)



type Status int
const (
  DEAD Status = 0
  STARTING Status = 1
  ALIVE Status = 2
  STOPPING Status = 3
  STOPPED Status = 4
  WARNING Status = 5
)
func (p Status) String() string {
  switch p {
  case DEAD: return "DEAD"
  case STARTING: return "STARTING"
  case ALIVE: return "ALIVE"
  case STOPPING: return "STOPPING"
  case STOPPED: return "STOPPED"
  case WARNING: return "WARNING"
  }
  return ""
}

func FromStatusString(s string) Status {
  switch s {
  case "DEAD": return DEAD
  case "STARTING": return STARTING
  case "ALIVE": return ALIVE
  case "STOPPING": return STOPPING
  case "STOPPED": return STOPPED
  case "WARNING": return WARNING
  }
  return Status(-10000)
}

func (p Status) Value() int {
  return int(p)
}

func (p Status) IsEnum() bool {
  return true
}

/**
 * Attributes:
 *  - Host
 *  - Port
 */
type Endpoint struct {
  thrift.TStruct
  Host string "host"; // 1
  Port int32 "port"; // 2
}

func NewEndpoint() *Endpoint {
  output := &Endpoint{
    TStruct:thrift.NewTStruct("Endpoint", []thrift.TField{
    thrift.NewTField("host", thrift.STRING, 1),
    thrift.NewTField("port", thrift.I32, 2),
    }),
  }
  {
  }
  return output
}

func (p *Endpoint) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "host" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "port" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Endpoint) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadString()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "host", p.ThriftName(), err1); }
  p.Host = v0
  return err
}

func (p *Endpoint) ReadFieldHost(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Endpoint) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadI32()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(2, "port", p.ThriftName(), err3); }
  p.Port = v2
  return err
}

func (p *Endpoint) ReadFieldPort(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Endpoint) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Endpoint")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Endpoint) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("host", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "host", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Host))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "host", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "host", p.ThriftName(), err); }
  return err
}

func (p *Endpoint) WriteFieldHost(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Endpoint) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("port", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "port", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Port))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "port", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "port", p.ThriftName(), err); }
  return err
}

func (p *Endpoint) WriteFieldPort(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Endpoint) TStructName() string {
  return "Endpoint"
}

func (p *Endpoint) ThriftName() string {
  return "Endpoint"
}

func (p *Endpoint) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Endpoint(%+v)", *p)
}

func (p *Endpoint) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Endpoint)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *Endpoint) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Host
  case 2: return p.Port
  }
  return nil
}

func (p *Endpoint) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("host", thrift.STRING, 1),
    thrift.NewTField("port", thrift.I32, 2),
    })
}

/**
 * Attributes:
 *  - ServiceEndpoint
 *  - AdditionalEndpoints
 *  - Status
 */
type ServiceInstance struct {
  thrift.TStruct
  ServiceEndpoint *Endpoint "serviceEndpoint"; // 1
  AdditionalEndpoints thrift.TMap "additionalEndpoints"; // 2
  Status Status "status"; // 3
}

func NewServiceInstance() *ServiceInstance {
  output := &ServiceInstance{
    TStruct:thrift.NewTStruct("ServiceInstance", []thrift.TField{
    thrift.NewTField("serviceEndpoint", thrift.STRUCT, 1),
    thrift.NewTField("additionalEndpoints", thrift.MAP, 2),
    thrift.NewTField("status", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *ServiceInstance) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "serviceEndpoint" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "additionalEndpoints" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "status" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ServiceInstance) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.ServiceEndpoint = NewEndpoint()
  err6 := p.ServiceEndpoint.Read(iprot)
  if err6 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ServiceEndpointEndpoint", err6); }
  return err
}

func (p *ServiceInstance) ReadFieldServiceEndpoint(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ServiceInstance) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype10, _vtype11, _size9, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.AdditionalEndpoints", "", err)
  }
  p.AdditionalEndpoints = thrift.NewTMap(_ktype10, _vtype11, _size9)
  for _i13:= 0; _i13 < _size9; _i13++ {
    v16, err17 := iprot.ReadString()
    if err17 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key14", "", err17); }
    _key14 := v16
    _val15 := NewEndpoint()
    err20 := _val15.Read(iprot)
    if err20 != nil { return thrift.NewTProtocolExceptionReadStruct("_val15Endpoint", err20); }
    p.AdditionalEndpoints.Set(_key14, _val15)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ServiceInstance) ReadFieldAdditionalEndpoints(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ServiceInstance) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v21, err22 := iprot.ReadI32()
  if err22 != nil { return thrift.NewTProtocolExceptionReadField(3, "status", p.ThriftName(), err22); }
  p.Status = Status(v21)
  return err
}

func (p *ServiceInstance) ReadFieldStatus(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ServiceInstance) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ServiceInstance")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ServiceInstance) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ServiceEndpoint != nil {
    err = oprot.WriteFieldBegin("serviceEndpoint", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "serviceEndpoint", p.ThriftName(), err); }
    err = p.ServiceEndpoint.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Endpoint", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "serviceEndpoint", p.ThriftName(), err); }
  }
  return err
}

func (p *ServiceInstance) WriteFieldServiceEndpoint(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ServiceInstance) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.AdditionalEndpoints != nil {
    err = oprot.WriteFieldBegin("additionalEndpoints", thrift.MAP, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "additionalEndpoints", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.AdditionalEndpoints.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter23 := range p.AdditionalEndpoints.Iter() {
      Kiter24, Viter25 := Miter23.Key().(string), Miter23.Value().(*Endpoint)
      err = oprot.WriteString(string(Kiter24))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter24", "", err); }
      err = Viter25.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Endpoint", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "additionalEndpoints", p.ThriftName(), err); }
  }
  return err
}

func (p *ServiceInstance) WriteFieldAdditionalEndpoints(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ServiceInstance) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("status", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "status", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Status))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "status", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "status", p.ThriftName(), err); }
  return err
}

func (p *ServiceInstance) WriteFieldStatus(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ServiceInstance) TStructName() string {
  return "ServiceInstance"
}

func (p *ServiceInstance) ThriftName() string {
  return "ServiceInstance"
}

func (p *ServiceInstance) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceInstance(%+v)", *p)
}

func (p *ServiceInstance) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ServiceInstance)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ServiceInstance) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ServiceEndpoint
  case 2: return p.AdditionalEndpoints
  case 3: return p.Status
  }
  return nil
}

func (p *ServiceInstance) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("serviceEndpoint", thrift.STRUCT, 1),
    thrift.NewTField("additionalEndpoints", thrift.MAP, 2),
    thrift.NewTField("status", thrift.I32, 3),
    })
}

func init() {
}

