/* Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package wentworth;

import (
        "tumblr/3rdparty/thrift"
        "fmt"
)



/**
 * It's considered good form to declare an exception type for your service.
 * Thrift will serialize and transmit them transparently.
 * 
 * Attributes:
 *  - Description
 */
type WentworthException struct {
  thrift.TStruct
  Description string "description"; // 1
}

func NewWentworthException() *WentworthException {
  output := &WentworthException{
    TStruct:thrift.NewTStruct("WentworthException", []thrift.TField{
    thrift.NewTField("description", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *WentworthException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "description" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *WentworthException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadString()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "description", p.ThriftName(), err1); }
  p.Description = v0
  return err
}

func (p *WentworthException) ReadFieldDescription(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *WentworthException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("WentworthException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *WentworthException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("description", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "description", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Description))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "description", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "description", p.ThriftName(), err); }
  return err
}

func (p *WentworthException) WriteFieldDescription(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *WentworthException) TStructName() string {
  return "WentworthException"
}

func (p *WentworthException) ThriftName() string {
  return "WentworthException"
}

func (p *WentworthException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WentworthException(%+v)", *p)
}

func (p *WentworthException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*WentworthException)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *WentworthException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Description
  }
  return nil
}

func (p *WentworthException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("description", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - NotificationType
 *  - TargetPostId
 *  - FromTumblelogId
 *  - NoteId
 *  - NewPostId
 *  - Timestamp
 */
type WNotification struct {
  thrift.TStruct
  NotificationType int32 "notification_type"; // 1
  TargetPostId int64 "target_post_id"; // 2
  FromTumblelogId int64 "from_tumblelog_id"; // 3
  NoteId int64 "note_id"; // 4
  NewPostId int64 "new_post_id"; // 5
  Timestamp int64 "timestamp"; // 6
}

func NewWNotification() *WNotification {
  output := &WNotification{
    TStruct:thrift.NewTStruct("WNotification", []thrift.TField{
    thrift.NewTField("notification_type", thrift.I32, 1),
    thrift.NewTField("target_post_id", thrift.I64, 2),
    thrift.NewTField("from_tumblelog_id", thrift.I64, 3),
    thrift.NewTField("note_id", thrift.I64, 4),
    thrift.NewTField("new_post_id", thrift.I64, 5),
    thrift.NewTField("timestamp", thrift.I64, 6),
    }),
  }
  {
  }
  return output
}

func (p *WNotification) IsSetTimestamp() bool {
  return p.Timestamp != 0
}

func (p *WNotification) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "notification_type" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "target_post_id" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "from_tumblelog_id" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "note_id" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "new_post_id" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *WNotification) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadI32()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(1, "notification_type", p.ThriftName(), err3); }
  p.NotificationType = v2
  return err
}

func (p *WNotification) ReadFieldNotificationType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *WNotification) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v4, err5 := iprot.ReadI64()
  if err5 != nil { return thrift.NewTProtocolExceptionReadField(2, "target_post_id", p.ThriftName(), err5); }
  p.TargetPostId = v4
  return err
}

func (p *WNotification) ReadFieldTargetPostId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *WNotification) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v6, err7 := iprot.ReadI64()
  if err7 != nil { return thrift.NewTProtocolExceptionReadField(3, "from_tumblelog_id", p.ThriftName(), err7); }
  p.FromTumblelogId = v6
  return err
}

func (p *WNotification) ReadFieldFromTumblelogId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *WNotification) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v8, err9 := iprot.ReadI64()
  if err9 != nil { return thrift.NewTProtocolExceptionReadField(4, "note_id", p.ThriftName(), err9); }
  p.NoteId = v8
  return err
}

func (p *WNotification) ReadFieldNoteId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *WNotification) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v10, err11 := iprot.ReadI64()
  if err11 != nil { return thrift.NewTProtocolExceptionReadField(5, "new_post_id", p.ThriftName(), err11); }
  p.NewPostId = v10
  return err
}

func (p *WNotification) ReadFieldNewPostId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *WNotification) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v12, err13 := iprot.ReadI64()
  if err13 != nil { return thrift.NewTProtocolExceptionReadField(6, "timestamp", p.ThriftName(), err13); }
  p.Timestamp = v12
  return err
}

func (p *WNotification) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *WNotification) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("WNotification")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *WNotification) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("notification_type", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "notification_type", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NotificationType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "notification_type", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "notification_type", p.ThriftName(), err); }
  return err
}

func (p *WNotification) WriteFieldNotificationType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *WNotification) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("target_post_id", thrift.I64, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "target_post_id", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.TargetPostId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "target_post_id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "target_post_id", p.ThriftName(), err); }
  return err
}

func (p *WNotification) WriteFieldTargetPostId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *WNotification) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("from_tumblelog_id", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "from_tumblelog_id", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.FromTumblelogId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "from_tumblelog_id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "from_tumblelog_id", p.ThriftName(), err); }
  return err
}

func (p *WNotification) WriteFieldFromTumblelogId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *WNotification) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("note_id", thrift.I64, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "note_id", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.NoteId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "note_id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "note_id", p.ThriftName(), err); }
  return err
}

func (p *WNotification) WriteFieldNoteId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *WNotification) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("new_post_id", thrift.I64, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "new_post_id", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.NewPostId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "new_post_id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "new_post_id", p.ThriftName(), err); }
  return err
}

func (p *WNotification) WriteFieldNewPostId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *WNotification) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.IsSetTimestamp() {
    err = oprot.WriteFieldBegin("timestamp", thrift.I64, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "timestamp", p.ThriftName(), err); }
    err = oprot.WriteI64(int64(p.Timestamp))
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "timestamp", p.ThriftName(), err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "timestamp", p.ThriftName(), err); }
  }
  return err
}

func (p *WNotification) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *WNotification) TStructName() string {
  return "WNotification"
}

func (p *WNotification) ThriftName() string {
  return "WNotification"
}

func (p *WNotification) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WNotification(%+v)", *p)
}

func (p *WNotification) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*WNotification)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *WNotification) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.NotificationType
  case 2: return p.TargetPostId
  case 3: return p.FromTumblelogId
  case 4: return p.NoteId
  case 5: return p.NewPostId
  case 6: return p.Timestamp
  }
  return nil
}

func (p *WNotification) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("notification_type", thrift.I32, 1),
    thrift.NewTField("target_post_id", thrift.I64, 2),
    thrift.NewTField("from_tumblelog_id", thrift.I64, 3),
    thrift.NewTField("note_id", thrift.I64, 4),
    thrift.NewTField("new_post_id", thrift.I64, 5),
    thrift.NewTField("timestamp", thrift.I64, 6),
    })
}

func init() {
}

