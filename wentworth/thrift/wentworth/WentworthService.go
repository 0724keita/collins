/* Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package wentworth;

import (
        "fmt"
        "tumblr/3rdparty/thrift"
	"tumblr/wentworth/thrift/twitter"
)


type IWentworthService interface {
  twitter.IThriftService

  /**
   * Parameters:
   *  - TumblelogId
   *  - Count
   */
  Get(tumblelogId int64, count int32) (retval14 thrift.TList, wwerror *WentworthException, err error)
  /**
   * Parameters:
   *  - TumblelogId
   *  - Notification
   */
  Store(tumblelogId int64, notification *WNotification) (wwerror *WentworthException, err error)
  /**
   * Parameters:
   *  - TumblelogId
   *  - Notification
   */
  Remove(tumblelogId int64, notification *WNotification) (wwerror *WentworthException, err error)
  /**
   * Parameters:
   *  - TumblelogId
   */
  RemoveAll(tumblelogId int64) (wwerror *WentworthException, err error)
}

type WentworthServiceClient struct {
  *twitter.ThriftServiceClient
}

func NewWentworthServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *WentworthServiceClient {
  return &WentworthServiceClient{twitter.ThriftServiceClient: twitter.NewThriftServiceClientFactory(t, f)}}

func NewWentworthServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *WentworthServiceClient {
  return &WentworthServiceClient{twitter.ThriftServiceClient: twitter.NewThriftServiceClientProtocol(t, iprot, oprot)}
}

/**
 * Parameters:
 *  - TumblelogId
 *  - Count
 */
func (p *WentworthServiceClient) Get(tumblelogId int64, count int32) (retval18 thrift.TList, wwerror *WentworthException, err error) {
  err = p.SendGet(tumblelogId, count)
  if err != nil { return }
  return p.RecvGet()
}

func (p *WentworthServiceClient) SendGet(tumblelogId int64, count int32)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId)
  args19 := NewGetArgs()
  args19.TumblelogId = tumblelogId
  args19.Count = count
  err = args19.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *WentworthServiceClient) RecvGet() (value thrift.TList, wwerror *WentworthException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error21 := thrift.NewTApplicationExceptionDefault()
    var error22 error
    error22, err = error21.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error22
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result20 := NewGetResult()
  err = result20.Read(iprot)
  iprot.ReadMessageEnd()
  value = result20.Success
  if result20.Wwerror != nil {
    wwerror = result20.Wwerror
  }
  return
}

/**
 * Parameters:
 *  - TumblelogId
 *  - Notification
 */
func (p *WentworthServiceClient) Store(tumblelogId int64, notification *WNotification) (wwerror *WentworthException, err error) {
  err = p.SendStore(tumblelogId, notification)
  if err != nil { return }
  return p.RecvStore()
}

func (p *WentworthServiceClient) SendStore(tumblelogId int64, notification *WNotification)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("store", thrift.CALL, p.SeqId)
  args24 := NewStoreArgs()
  args24.TumblelogId = tumblelogId
  args24.Notification = notification
  err = args24.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *WentworthServiceClient) RecvStore() (wwerror *WentworthException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error26 := thrift.NewTApplicationExceptionDefault()
    var error27 error
    error27, err = error26.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error27
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result25 := NewStoreResult()
  err = result25.Read(iprot)
  iprot.ReadMessageEnd()
  if result25.Wwerror != nil {
    wwerror = result25.Wwerror
  }
  return
}

/**
 * Parameters:
 *  - TumblelogId
 *  - Notification
 */
func (p *WentworthServiceClient) Remove(tumblelogId int64, notification *WNotification) (wwerror *WentworthException, err error) {
  err = p.SendRemove(tumblelogId, notification)
  if err != nil { return }
  return p.RecvRemove()
}

func (p *WentworthServiceClient) SendRemove(tumblelogId int64, notification *WNotification)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("remove", thrift.CALL, p.SeqId)
  args29 := NewRemoveArgs()
  args29.TumblelogId = tumblelogId
  args29.Notification = notification
  err = args29.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *WentworthServiceClient) RecvRemove() (wwerror *WentworthException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error31 := thrift.NewTApplicationExceptionDefault()
    var error32 error
    error32, err = error31.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error32
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result30 := NewRemoveResult()
  err = result30.Read(iprot)
  iprot.ReadMessageEnd()
  if result30.Wwerror != nil {
    wwerror = result30.Wwerror
  }
  return
}

/**
 * Parameters:
 *  - TumblelogId
 */
func (p *WentworthServiceClient) RemoveAll(tumblelogId int64) (wwerror *WentworthException, err error) {
  err = p.SendRemoveAll(tumblelogId)
  if err != nil { return }
  return p.RecvRemoveAll()
}

func (p *WentworthServiceClient) SendRemoveAll(tumblelogId int64)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("removeAll", thrift.CALL, p.SeqId)
  args34 := NewRemoveAllArgs()
  args34.TumblelogId = tumblelogId
  err = args34.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *WentworthServiceClient) RecvRemoveAll() (wwerror *WentworthException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error36 := thrift.NewTApplicationExceptionDefault()
    var error37 error
    error37, err = error36.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error37
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result35 := NewRemoveAllResult()
  err = result35.Read(iprot)
  iprot.ReadMessageEnd()
  if result35.Wwerror != nil {
    wwerror = result35.Wwerror
  }
  return
}


type WentworthServiceProcessor struct {
  super *twitter.ThriftServiceProcessor
}

func (p *WentworthServiceProcessor) Handler() IWentworthService {
  return p.super.Handler().(IWentworthService)
}

func (p *WentworthServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.super.AddToProcessorMap(key, processor)
}

func (p *WentworthServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  return p.super.GetProcessorFunction(key)
}

func (p *WentworthServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.super.ProcessorMap()
}

func NewWentworthServiceProcessor(handler IWentworthService) *WentworthServiceProcessor {
  self38 := &WentworthServiceProcessor{super: twitter.NewThriftServiceProcessor(handler)}
  self38.AddToProcessorMap("get", &wentworthServiceProcessorGet{handler:handler})
  self38.AddToProcessorMap("store", &wentworthServiceProcessorStore{handler:handler})
  self38.AddToProcessorMap("remove", &wentworthServiceProcessorRemove{handler:handler})
  self38.AddToProcessorMap("removeAll", &wentworthServiceProcessorRemoveAll{handler:handler})
  return self38
}

func (p *WentworthServiceProcessor) Process(iprot, oprot thrift.TProtocol) (bool, thrift.TException) {
  return p.super.Process(iprot, oprot)
}

type wentworthServiceProcessorGet struct {
  handler IWentworthService
}

func (p *wentworthServiceProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetResult()
  if result.Success, result.Wwerror, err = p.handler.Get(args.TumblelogId, args.Count); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wentworthServiceProcessorStore struct {
  handler IWentworthService
}

func (p *wentworthServiceProcessorStore) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewStoreArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("store", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewStoreResult()
  if result.Wwerror, err = p.handler.Store(args.TumblelogId, args.Notification); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing store: " + err.Error())
    oprot.WriteMessageBegin("store", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("store", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wentworthServiceProcessorRemove struct {
  handler IWentworthService
}

func (p *wentworthServiceProcessorRemove) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRemoveArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("remove", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRemoveResult()
  if result.Wwerror, err = p.handler.Remove(args.TumblelogId, args.Notification); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: " + err.Error())
    oprot.WriteMessageBegin("remove", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("remove", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type wentworthServiceProcessorRemoveAll struct {
  handler IWentworthService
}

func (p *wentworthServiceProcessorRemoveAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRemoveAllArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRemoveAllResult()
  if result.Wwerror, err = p.handler.RemoveAll(args.TumblelogId); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAll: " + err.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("removeAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - TumblelogId
 *  - Count
 */
type GetArgs struct {
  thrift.TStruct
  TumblelogId int64 "tumblelogId"; // 1
  Count int32 "count"; // 2
}

func NewGetArgs() *GetArgs {
  output := &GetArgs{
    TStruct:thrift.NewTStruct("get_args", []thrift.TField{
    thrift.NewTField("tumblelogId", thrift.I64, 1),
    thrift.NewTField("count", thrift.I32, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tumblelogId" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "count" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v39, err40 := iprot.ReadI64()
  if err40 != nil { return thrift.NewTProtocolExceptionReadField(1, "tumblelogId", p.ThriftName(), err40); }
  p.TumblelogId = v39
  return err
}

func (p *GetArgs) ReadFieldTumblelogId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v41, err42 := iprot.ReadI32()
  if err42 != nil { return thrift.NewTProtocolExceptionReadField(2, "count", p.ThriftName(), err42); }
  p.Count = v41
  return err
}

func (p *GetArgs) ReadFieldCount(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("tumblelogId", thrift.I64, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tumblelogId", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.TumblelogId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tumblelogId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tumblelogId", p.ThriftName(), err); }
  return err
}

func (p *GetArgs) WriteFieldTumblelogId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("count", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Count))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err); }
  return err
}

func (p *GetArgs) WriteFieldCount(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetArgs) TStructName() string {
  return "GetArgs"
}

func (p *GetArgs) ThriftName() string {
  return "get_args"
}

func (p *GetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetArgs(%+v)", *p)
}

func (p *GetArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TumblelogId
  case 2: return p.Count
  }
  return nil
}

func (p *GetArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tumblelogId", thrift.I64, 1),
    thrift.NewTField("count", thrift.I32, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Wwerror
 */
type GetResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Wwerror *WentworthException "wwerror"; // 1
}

func NewGetResult() *GetResult {
  output := &GetResult{
    TStruct:thrift.NewTStruct("get_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("wwerror", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "wwerror" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype48, _size45, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype48, _size45)
  for _i49:= 0; _i49 < _size45; _i49++ {
    _elem50 := NewWNotification()
    err53 := _elem50.Read(iprot)
    if err53 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem50WNotification", err53); }
    p.Success.Push(_elem50)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Wwerror = NewWentworthException()
  err56 := p.Wwerror.Read(iprot)
  if err56 != nil { return thrift.NewTProtocolExceptionReadStruct("p.WwerrorWentworthException", err56); }
  return err
}

func (p *GetResult) ReadFieldWwerror(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Wwerror != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter57 := range p.Success.Iter() {
      Iter58 := Iter57.(*WNotification)
      err = Iter58.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("WNotification", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Wwerror != nil {
    err = oprot.WriteFieldBegin("wwerror", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "wwerror", p.ThriftName(), err); }
    err = p.Wwerror.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("WentworthException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "wwerror", p.ThriftName(), err); }
  }
  return err
}

func (p *GetResult) WriteFieldWwerror(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetResult) TStructName() string {
  return "GetResult"
}

func (p *GetResult) ThriftName() string {
  return "get_result"
}

func (p *GetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetResult(%+v)", *p)
}

func (p *GetResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Wwerror
  }
  return nil
}

func (p *GetResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("wwerror", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TumblelogId
 *  - Notification
 */
type StoreArgs struct {
  thrift.TStruct
  TumblelogId int64 "tumblelogId"; // 1
  Notification *WNotification "notification"; // 2
}

func NewStoreArgs() *StoreArgs {
  output := &StoreArgs{
    TStruct:thrift.NewTStruct("store_args", []thrift.TField{
    thrift.NewTField("tumblelogId", thrift.I64, 1),
    thrift.NewTField("notification", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *StoreArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tumblelogId" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "notification" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *StoreArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v59, err60 := iprot.ReadI64()
  if err60 != nil { return thrift.NewTProtocolExceptionReadField(1, "tumblelogId", p.ThriftName(), err60); }
  p.TumblelogId = v59
  return err
}

func (p *StoreArgs) ReadFieldTumblelogId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *StoreArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Notification = NewWNotification()
  err63 := p.Notification.Read(iprot)
  if err63 != nil { return thrift.NewTProtocolExceptionReadStruct("p.NotificationWNotification", err63); }
  return err
}

func (p *StoreArgs) ReadFieldNotification(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *StoreArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("store_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *StoreArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("tumblelogId", thrift.I64, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tumblelogId", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.TumblelogId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tumblelogId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tumblelogId", p.ThriftName(), err); }
  return err
}

func (p *StoreArgs) WriteFieldTumblelogId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *StoreArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Notification != nil {
    err = oprot.WriteFieldBegin("notification", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "notification", p.ThriftName(), err); }
    err = p.Notification.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("WNotification", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "notification", p.ThriftName(), err); }
  }
  return err
}

func (p *StoreArgs) WriteFieldNotification(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *StoreArgs) TStructName() string {
  return "StoreArgs"
}

func (p *StoreArgs) ThriftName() string {
  return "store_args"
}

func (p *StoreArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StoreArgs(%+v)", *p)
}

func (p *StoreArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*StoreArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *StoreArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TumblelogId
  case 2: return p.Notification
  }
  return nil
}

func (p *StoreArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tumblelogId", thrift.I64, 1),
    thrift.NewTField("notification", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Wwerror
 */
type StoreResult struct {
  thrift.TStruct
  Wwerror *WentworthException "wwerror"; // 1
}

func NewStoreResult() *StoreResult {
  output := &StoreResult{
    TStruct:thrift.NewTStruct("store_result", []thrift.TField{
    thrift.NewTField("wwerror", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *StoreResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "wwerror" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *StoreResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Wwerror = NewWentworthException()
  err66 := p.Wwerror.Read(iprot)
  if err66 != nil { return thrift.NewTProtocolExceptionReadStruct("p.WwerrorWentworthException", err66); }
  return err
}

func (p *StoreResult) ReadFieldWwerror(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *StoreResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("store_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Wwerror != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *StoreResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Wwerror != nil {
    err = oprot.WriteFieldBegin("wwerror", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "wwerror", p.ThriftName(), err); }
    err = p.Wwerror.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("WentworthException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "wwerror", p.ThriftName(), err); }
  }
  return err
}

func (p *StoreResult) WriteFieldWwerror(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *StoreResult) TStructName() string {
  return "StoreResult"
}

func (p *StoreResult) ThriftName() string {
  return "store_result"
}

func (p *StoreResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StoreResult(%+v)", *p)
}

func (p *StoreResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*StoreResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *StoreResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Wwerror
  }
  return nil
}

func (p *StoreResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("wwerror", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TumblelogId
 *  - Notification
 */
type RemoveArgs struct {
  thrift.TStruct
  TumblelogId int64 "tumblelogId"; // 1
  Notification *WNotification "notification"; // 2
}

func NewRemoveArgs() *RemoveArgs {
  output := &RemoveArgs{
    TStruct:thrift.NewTStruct("remove_args", []thrift.TField{
    thrift.NewTField("tumblelogId", thrift.I64, 1),
    thrift.NewTField("notification", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *RemoveArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tumblelogId" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "notification" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v67, err68 := iprot.ReadI64()
  if err68 != nil { return thrift.NewTProtocolExceptionReadField(1, "tumblelogId", p.ThriftName(), err68); }
  p.TumblelogId = v67
  return err
}

func (p *RemoveArgs) ReadFieldTumblelogId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoveArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Notification = NewWNotification()
  err71 := p.Notification.Read(iprot)
  if err71 != nil { return thrift.NewTProtocolExceptionReadStruct("p.NotificationWNotification", err71); }
  return err
}

func (p *RemoveArgs) ReadFieldNotification(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RemoveArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("remove_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("tumblelogId", thrift.I64, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tumblelogId", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.TumblelogId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tumblelogId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tumblelogId", p.ThriftName(), err); }
  return err
}

func (p *RemoveArgs) WriteFieldTumblelogId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoveArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Notification != nil {
    err = oprot.WriteFieldBegin("notification", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "notification", p.ThriftName(), err); }
    err = p.Notification.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("WNotification", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "notification", p.ThriftName(), err); }
  }
  return err
}

func (p *RemoveArgs) WriteFieldNotification(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RemoveArgs) TStructName() string {
  return "RemoveArgs"
}

func (p *RemoveArgs) ThriftName() string {
  return "remove_args"
}

func (p *RemoveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveArgs(%+v)", *p)
}

func (p *RemoveArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *RemoveArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TumblelogId
  case 2: return p.Notification
  }
  return nil
}

func (p *RemoveArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tumblelogId", thrift.I64, 1),
    thrift.NewTField("notification", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Wwerror
 */
type RemoveResult struct {
  thrift.TStruct
  Wwerror *WentworthException "wwerror"; // 1
}

func NewRemoveResult() *RemoveResult {
  output := &RemoveResult{
    TStruct:thrift.NewTStruct("remove_result", []thrift.TField{
    thrift.NewTField("wwerror", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *RemoveResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "wwerror" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Wwerror = NewWentworthException()
  err74 := p.Wwerror.Read(iprot)
  if err74 != nil { return thrift.NewTProtocolExceptionReadStruct("p.WwerrorWentworthException", err74); }
  return err
}

func (p *RemoveResult) ReadFieldWwerror(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoveResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("remove_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Wwerror != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Wwerror != nil {
    err = oprot.WriteFieldBegin("wwerror", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "wwerror", p.ThriftName(), err); }
    err = p.Wwerror.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("WentworthException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "wwerror", p.ThriftName(), err); }
  }
  return err
}

func (p *RemoveResult) WriteFieldWwerror(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoveResult) TStructName() string {
  return "RemoveResult"
}

func (p *RemoveResult) ThriftName() string {
  return "remove_result"
}

func (p *RemoveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveResult(%+v)", *p)
}

func (p *RemoveResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *RemoveResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Wwerror
  }
  return nil
}

func (p *RemoveResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("wwerror", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TumblelogId
 */
type RemoveAllArgs struct {
  thrift.TStruct
  TumblelogId int64 "tumblelogId"; // 1
}

func NewRemoveAllArgs() *RemoveAllArgs {
  output := &RemoveAllArgs{
    TStruct:thrift.NewTStruct("removeAll_args", []thrift.TField{
    thrift.NewTField("tumblelogId", thrift.I64, 1),
    }),
  }
  {
  }
  return output
}

func (p *RemoveAllArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tumblelogId" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveAllArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v75, err76 := iprot.ReadI64()
  if err76 != nil { return thrift.NewTProtocolExceptionReadField(1, "tumblelogId", p.ThriftName(), err76); }
  p.TumblelogId = v75
  return err
}

func (p *RemoveAllArgs) ReadFieldTumblelogId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoveAllArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("removeAll_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveAllArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("tumblelogId", thrift.I64, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tumblelogId", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.TumblelogId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tumblelogId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tumblelogId", p.ThriftName(), err); }
  return err
}

func (p *RemoveAllArgs) WriteFieldTumblelogId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoveAllArgs) TStructName() string {
  return "RemoveAllArgs"
}

func (p *RemoveAllArgs) ThriftName() string {
  return "removeAll_args"
}

func (p *RemoveAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveAllArgs(%+v)", *p)
}

func (p *RemoveAllArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveAllArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *RemoveAllArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TumblelogId
  }
  return nil
}

func (p *RemoveAllArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tumblelogId", thrift.I64, 1),
    })
}

/**
 * Attributes:
 *  - Wwerror
 */
type RemoveAllResult struct {
  thrift.TStruct
  Wwerror *WentworthException "wwerror"; // 1
}

func NewRemoveAllResult() *RemoveAllResult {
  output := &RemoveAllResult{
    TStruct:thrift.NewTStruct("removeAll_result", []thrift.TField{
    thrift.NewTField("wwerror", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *RemoveAllResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "wwerror" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveAllResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Wwerror = NewWentworthException()
  err79 := p.Wwerror.Read(iprot)
  if err79 != nil { return thrift.NewTProtocolExceptionReadStruct("p.WwerrorWentworthException", err79); }
  return err
}

func (p *RemoveAllResult) ReadFieldWwerror(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RemoveAllResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("removeAll_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Wwerror != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RemoveAllResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Wwerror != nil {
    err = oprot.WriteFieldBegin("wwerror", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "wwerror", p.ThriftName(), err); }
    err = p.Wwerror.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("WentworthException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "wwerror", p.ThriftName(), err); }
  }
  return err
}

func (p *RemoveAllResult) WriteFieldWwerror(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RemoveAllResult) TStructName() string {
  return "RemoveAllResult"
}

func (p *RemoveAllResult) ThriftName() string {
  return "removeAll_result"
}

func (p *RemoveAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveAllResult(%+v)", *p)
}

func (p *RemoveAllResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RemoveAllResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *RemoveAllResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Wwerror
  }
  return nil
}

func (p *RemoveAllResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("wwerror", thrift.STRUCT, 1),
    })
}


