/* Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "net"
        "net/url"
        "os"
        "strconv"
        "tumblr/3rdparty/thrift"
        "tumblr/wentworth/thrift/wentworth"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  get(tumblelogId int64, count int32) (retval80 thrift.TList, wwerror *WentworthException, err error)\n")
  fmt.Fprint(os.Stderr, "  store(tumblelogId int64, notification *WNotification) (wwerror *WentworthException, err error)\n")
  fmt.Fprint(os.Stderr, "  remove(tumblelogId int64, notification *WNotification) (wwerror *WentworthException, err error)\n")
  fmt.Fprint(os.Stderr, "  removeAll(tumblelogId int64) (wwerror *WentworthException, err error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  var err error
  if len(urlString) > 0 {
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.Error(), "\n")
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.Error(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  /*var err error*/
  if useHttp {
    trans, err = thrift.NewTHttpClient(urlString/*parsedUrl.Raw*/)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.Error())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.Error())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := wentworth.NewWentworthServiceClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.Error())
    os.Exit(1)
  }
  
  switch cmd {
  case "get":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "Get requires 2 args\n")
      flag.Usage()
    }
    argvalue0, err84 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err84 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err85 := (strconv.Atoi(flag.Arg(2)))
    if err85 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.Get(value0, value1))
    fmt.Print("\n")
    break
  case "store":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "Store requires 2 args\n")
      flag.Usage()
    }
    argvalue0, err86 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err86 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg87 := flag.Arg(2)
    mbTrans88 := thrift.NewTMemoryBufferLen(len(arg87))
    defer mbTrans88.Close()
    _, err89 := mbTrans88.WriteString(arg87)
    if err89 != nil {
      Usage()
      return
    }
    factory90 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt91 := factory90.GetProtocol(mbTrans88)
    argvalue1 := wentworth.NewWNotification()
    err92 := argvalue1.Read(jsProt91)
    if err92 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Store(value0, value1))
    fmt.Print("\n")
    break
  case "remove":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "Remove requires 2 args\n")
      flag.Usage()
    }
    argvalue0, err93 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err93 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg94 := flag.Arg(2)
    mbTrans95 := thrift.NewTMemoryBufferLen(len(arg94))
    defer mbTrans95.Close()
    _, err96 := mbTrans95.WriteString(arg94)
    if err96 != nil {
      Usage()
      return
    }
    factory97 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt98 := factory97.GetProtocol(mbTrans95)
    argvalue1 := wentworth.NewWNotification()
    err99 := argvalue1.Read(jsProt98)
    if err99 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Remove(value0, value1))
    fmt.Print("\n")
    break
  case "removeAll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RemoveAll requires 1 args\n")
      flag.Usage()
    }
    argvalue0, err100 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err100 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveAll(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
