/* Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package twitter;

import (
        "fmt"
        "tumblr/3rdparty/thrift"
	. "tumblr/wentworth/thrift/endpoint"
)


type IThriftService interface {
  GetName() (retval0 string, err error)
  /**
   * Gets a version identifier string for the running build of the service.
   */
  GetVersion() (retval1 string, err error)
  GetStatus() (retval2 Status, err error)
  GetStatusDetails() (retval3 string, err error)
  GetCounters() (retval4 thrift.TMap, err error)
  /**
   * Parameters:
   *  - Key
   */
  GetCounter(key string) (retval5 int64, err error)
  /**
   * Parameters:
   *  - Key
   *  - Value
   */
  SetOption(key string, value string) (err error)
  /**
   * Parameters:
   *  - Key
   */
  GetOption(key string) (retval7 string, err error)
  GetOptions() (retval8 thrift.TMap, err error)
  Uptime() (retval9 int64, err error)
  Shutdown() (err error)
}

type ThriftServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftServiceClient {
  return &ThriftServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftServiceClient {
  return &ThriftServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *ThriftServiceClient) GetName() (retval11 string, err error) {
  err = p.SendGetName()
  if err != nil { return }
  return p.RecvGetName()
}

func (p *ThriftServiceClient) SendGetName()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getName", thrift.CALL, p.SeqId)
  args12 := NewGetNameArgs()
  err = args12.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftServiceClient) RecvGetName() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewTApplicationExceptionDefault()
    var error15 error
    error15, err = error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result13 := NewGetNameResult()
  err = result13.Read(iprot)
  iprot.ReadMessageEnd()
  value = result13.Success
  return
}

/**
 * Gets a version identifier string for the running build of the service.
 */
func (p *ThriftServiceClient) GetVersion() (retval16 string, err error) {
  err = p.SendGetVersion()
  if err != nil { return }
  return p.RecvGetVersion()
}

func (p *ThriftServiceClient) SendGetVersion()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getVersion", thrift.CALL, p.SeqId)
  args17 := NewGetVersionArgs()
  err = args17.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftServiceClient) RecvGetVersion() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error19 := thrift.NewTApplicationExceptionDefault()
    var error20 error
    error20, err = error19.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error20
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result18 := NewGetVersionResult()
  err = result18.Read(iprot)
  iprot.ReadMessageEnd()
  value = result18.Success
  return
}

func (p *ThriftServiceClient) GetStatus() (retval21 Status, err error) {
  err = p.SendGetStatus()
  if err != nil { return }
  return p.RecvGetStatus()
}

func (p *ThriftServiceClient) SendGetStatus()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getStatus", thrift.CALL, p.SeqId)
  args22 := NewGetStatusArgs()
  err = args22.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftServiceClient) RecvGetStatus() (value Status, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error24 := thrift.NewTApplicationExceptionDefault()
    var error25 error
    error25, err = error24.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error25
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result23 := NewGetStatusResult()
  err = result23.Read(iprot)
  iprot.ReadMessageEnd()
  value = result23.Success
  return
}

func (p *ThriftServiceClient) GetStatusDetails() (retval26 string, err error) {
  err = p.SendGetStatusDetails()
  if err != nil { return }
  return p.RecvGetStatusDetails()
}

func (p *ThriftServiceClient) SendGetStatusDetails()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getStatusDetails", thrift.CALL, p.SeqId)
  args27 := NewGetStatusDetailsArgs()
  err = args27.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftServiceClient) RecvGetStatusDetails() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error29 := thrift.NewTApplicationExceptionDefault()
    var error30 error
    error30, err = error29.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error30
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result28 := NewGetStatusDetailsResult()
  err = result28.Read(iprot)
  iprot.ReadMessageEnd()
  value = result28.Success
  return
}

func (p *ThriftServiceClient) GetCounters() (retval31 thrift.TMap, err error) {
  err = p.SendGetCounters()
  if err != nil { return }
  return p.RecvGetCounters()
}

func (p *ThriftServiceClient) SendGetCounters()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getCounters", thrift.CALL, p.SeqId)
  args32 := NewGetCountersArgs()
  err = args32.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftServiceClient) RecvGetCounters() (value thrift.TMap, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error34 := thrift.NewTApplicationExceptionDefault()
    var error35 error
    error35, err = error34.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error35
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result33 := NewGetCountersResult()
  err = result33.Read(iprot)
  iprot.ReadMessageEnd()
  value = result33.Success
  return
}

/**
 * Parameters:
 *  - Key
 */
func (p *ThriftServiceClient) GetCounter(key string) (retval36 int64, err error) {
  err = p.SendGetCounter(key)
  if err != nil { return }
  return p.RecvGetCounter()
}

func (p *ThriftServiceClient) SendGetCounter(key string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getCounter", thrift.CALL, p.SeqId)
  args37 := NewGetCounterArgs()
  args37.Key = key
  err = args37.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftServiceClient) RecvGetCounter() (value int64, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error39 := thrift.NewTApplicationExceptionDefault()
    var error40 error
    error40, err = error39.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error40
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result38 := NewGetCounterResult()
  err = result38.Read(iprot)
  iprot.ReadMessageEnd()
  value = result38.Success
  return
}

/**
 * Parameters:
 *  - Key
 *  - Value
 */
func (p *ThriftServiceClient) SetOption(key string, value string) (err error) {
  err = p.SendSetOption(key, value)
  if err != nil { return }
  return p.RecvSetOption()
}

func (p *ThriftServiceClient) SendSetOption(key string, value string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("setOption", thrift.CALL, p.SeqId)
  args42 := NewSetOptionArgs()
  args42.Key = key
  args42.Value = value
  err = args42.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftServiceClient) RecvSetOption() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error44 := thrift.NewTApplicationExceptionDefault()
    var error45 error
    error45, err = error44.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error45
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result43 := NewSetOptionResult()
  err = result43.Read(iprot)
  iprot.ReadMessageEnd()
  return
}

/**
 * Parameters:
 *  - Key
 */
func (p *ThriftServiceClient) GetOption(key string) (retval46 string, err error) {
  err = p.SendGetOption(key)
  if err != nil { return }
  return p.RecvGetOption()
}

func (p *ThriftServiceClient) SendGetOption(key string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getOption", thrift.CALL, p.SeqId)
  args47 := NewGetOptionArgs()
  args47.Key = key
  err = args47.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftServiceClient) RecvGetOption() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error49 := thrift.NewTApplicationExceptionDefault()
    var error50 error
    error50, err = error49.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error50
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result48 := NewGetOptionResult()
  err = result48.Read(iprot)
  iprot.ReadMessageEnd()
  value = result48.Success
  return
}

func (p *ThriftServiceClient) GetOptions() (retval51 thrift.TMap, err error) {
  err = p.SendGetOptions()
  if err != nil { return }
  return p.RecvGetOptions()
}

func (p *ThriftServiceClient) SendGetOptions()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getOptions", thrift.CALL, p.SeqId)
  args52 := NewGetOptionsArgs()
  err = args52.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftServiceClient) RecvGetOptions() (value thrift.TMap, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error54 := thrift.NewTApplicationExceptionDefault()
    var error55 error
    error55, err = error54.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error55
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result53 := NewGetOptionsResult()
  err = result53.Read(iprot)
  iprot.ReadMessageEnd()
  value = result53.Success
  return
}

func (p *ThriftServiceClient) Uptime() (retval56 int64, err error) {
  err = p.SendUptime()
  if err != nil { return }
  return p.RecvUptime()
}

func (p *ThriftServiceClient) SendUptime()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("uptime", thrift.CALL, p.SeqId)
  args57 := NewUptimeArgs()
  err = args57.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftServiceClient) RecvUptime() (value int64, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error59 := thrift.NewTApplicationExceptionDefault()
    var error60 error
    error60, err = error59.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error60
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result58 := NewUptimeResult()
  err = result58.Read(iprot)
  iprot.ReadMessageEnd()
  value = result58.Success
  return
}

func (p *ThriftServiceClient) Shutdown() (err error) {
  err = p.SendShutdown()
  if err != nil { return }
  return
}

func (p *ThriftServiceClient) SendShutdown()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("shutdown", thrift.CALL, p.SeqId)
  args62 := NewShutdownArgs()
  err = args62.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftServiceClient) RecvShutdown() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error64 := thrift.NewTApplicationExceptionDefault()
    var error65 error
    error65, err = error64.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error65
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result63 := NewShutdownResult()
  err = result63.Read(iprot)
  iprot.ReadMessageEnd()
  return
}


type ThriftServiceProcessor struct {
  handler IThriftService
  processorMap map[string]thrift.TProcessorFunction
}

func (p *ThriftServiceProcessor) Handler() IThriftService {
  return p.handler
}

func (p *ThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  processor, exists = p.processorMap[key]
  return processor, exists
}

func (p *ThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewThriftServiceProcessor(handler IThriftService) *ThriftServiceProcessor {

  self66 := &ThriftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self66.processorMap["getName"] = &thriftServiceProcessorGetName{handler:handler}
  self66.processorMap["getVersion"] = &thriftServiceProcessorGetVersion{handler:handler}
  self66.processorMap["getStatus"] = &thriftServiceProcessorGetStatus{handler:handler}
  self66.processorMap["getStatusDetails"] = &thriftServiceProcessorGetStatusDetails{handler:handler}
  self66.processorMap["getCounters"] = &thriftServiceProcessorGetCounters{handler:handler}
  self66.processorMap["getCounter"] = &thriftServiceProcessorGetCounter{handler:handler}
  self66.processorMap["setOption"] = &thriftServiceProcessorSetOption{handler:handler}
  self66.processorMap["getOption"] = &thriftServiceProcessorGetOption{handler:handler}
  self66.processorMap["getOptions"] = &thriftServiceProcessorGetOptions{handler:handler}
  self66.processorMap["uptime"] = &thriftServiceProcessorUptime{handler:handler}
  self66.processorMap["shutdown"] = &thriftServiceProcessorShutdown{handler:handler}
return self66
}

func (p *ThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return }
  process, nameFound := p.GetProcessorFunction(name)
  if !nameFound || process == nil {
    iprot.Skip(thrift.STRUCT)
    iprot.ReadMessageEnd()
    x67 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
    oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
    x67.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return false, x67
  }
  return process.Process(seqId, iprot, oprot)
}

type thriftServiceProcessorGetName struct {
  handler IThriftService
}

func (p *thriftServiceProcessorGetName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetNameResult()
  if result.Success, err = p.handler.GetName(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getName: " + err.Error())
    oprot.WriteMessageBegin("getName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftServiceProcessorGetVersion struct {
  handler IThriftService
}

func (p *thriftServiceProcessorGetVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetVersionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetVersionResult()
  if result.Success, err = p.handler.GetVersion(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVersion: " + err.Error())
    oprot.WriteMessageBegin("getVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftServiceProcessorGetStatus struct {
  handler IThriftService
}

func (p *thriftServiceProcessorGetStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetStatusArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetStatusResult()
  if result.Success, err = p.handler.GetStatus(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStatus: " + err.Error())
    oprot.WriteMessageBegin("getStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftServiceProcessorGetStatusDetails struct {
  handler IThriftService
}

func (p *thriftServiceProcessorGetStatusDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetStatusDetailsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getStatusDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetStatusDetailsResult()
  if result.Success, err = p.handler.GetStatusDetails(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStatusDetails: " + err.Error())
    oprot.WriteMessageBegin("getStatusDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getStatusDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftServiceProcessorGetCounters struct {
  handler IThriftService
}

func (p *thriftServiceProcessorGetCounters) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetCountersArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCounters", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetCountersResult()
  if result.Success, err = p.handler.GetCounters(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCounters: " + err.Error())
    oprot.WriteMessageBegin("getCounters", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getCounters", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftServiceProcessorGetCounter struct {
  handler IThriftService
}

func (p *thriftServiceProcessorGetCounter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetCounterArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCounter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetCounterResult()
  if result.Success, err = p.handler.GetCounter(args.Key); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCounter: " + err.Error())
    oprot.WriteMessageBegin("getCounter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getCounter", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftServiceProcessorSetOption struct {
  handler IThriftService
}

func (p *thriftServiceProcessorSetOption) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSetOptionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setOption", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSetOptionResult()
  if err = p.handler.SetOption(args.Key, args.Value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setOption: " + err.Error())
    oprot.WriteMessageBegin("setOption", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("setOption", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftServiceProcessorGetOption struct {
  handler IThriftService
}

func (p *thriftServiceProcessorGetOption) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetOptionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getOption", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetOptionResult()
  if result.Success, err = p.handler.GetOption(args.Key); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOption: " + err.Error())
    oprot.WriteMessageBegin("getOption", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getOption", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftServiceProcessorGetOptions struct {
  handler IThriftService
}

func (p *thriftServiceProcessorGetOptions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetOptionsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getOptions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetOptionsResult()
  if result.Success, err = p.handler.GetOptions(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOptions: " + err.Error())
    oprot.WriteMessageBegin("getOptions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getOptions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftServiceProcessorUptime struct {
  handler IThriftService
}

func (p *thriftServiceProcessorUptime) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewUptimeArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("uptime", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewUptimeResult()
  if result.Success, err = p.handler.Uptime(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing uptime: " + err.Error())
    oprot.WriteMessageBegin("uptime", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("uptime", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftServiceProcessorShutdown struct {
  handler IThriftService
}

func (p *thriftServiceProcessorShutdown) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewShutdownArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("shutdown", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewShutdownResult()
  if err = p.handler.Shutdown(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing shutdown: " + err.Error())
    oprot.WriteMessageBegin("shutdown", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("shutdown", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type GetNameArgs struct {
  thrift.TStruct
}

func NewGetNameArgs() *GetNameArgs {
  output := &GetNameArgs{
    TStruct:thrift.NewTStruct("getName_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getName_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNameArgs) TStructName() string {
  return "GetNameArgs"
}

func (p *GetNameArgs) ThriftName() string {
  return "getName_args"
}

func (p *GetNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNameArgs(%+v)", *p)
}

func (p *GetNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNameArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetNameResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetNameResult() *GetNameResult {
  output := &GetNameResult{
    TStruct:thrift.NewTStruct("getName_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v68, err69 := iprot.ReadString()
  if err69 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err69); }
  p.Success = v68
  return err
}

func (p *GetNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getName_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetNameResult) TStructName() string {
  return "GetNameResult"
}

func (p *GetNameResult) ThriftName() string {
  return "getName_result"
}

func (p *GetNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNameResult(%+v)", *p)
}

func (p *GetNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetNameResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

type GetVersionArgs struct {
  thrift.TStruct
}

func NewGetVersionArgs() *GetVersionArgs {
  output := &GetVersionArgs{
    TStruct:thrift.NewTStruct("getVersion_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetVersionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVersionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getVersion_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVersionArgs) TStructName() string {
  return "GetVersionArgs"
}

func (p *GetVersionArgs) ThriftName() string {
  return "getVersion_args"
}

func (p *GetVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetVersionArgs(%+v)", *p)
}

func (p *GetVersionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetVersionArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetVersionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetVersionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetVersionResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetVersionResult() *GetVersionResult {
  output := &GetVersionResult{
    TStruct:thrift.NewTStruct("getVersion_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetVersionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVersionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v70, err71 := iprot.ReadString()
  if err71 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err71); }
  p.Success = v70
  return err
}

func (p *GetVersionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetVersionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getVersion_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVersionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetVersionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetVersionResult) TStructName() string {
  return "GetVersionResult"
}

func (p *GetVersionResult) ThriftName() string {
  return "getVersion_result"
}

func (p *GetVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetVersionResult(%+v)", *p)
}

func (p *GetVersionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetVersionResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetVersionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetVersionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

type GetStatusArgs struct {
  thrift.TStruct
}

func NewGetStatusArgs() *GetStatusArgs {
  output := &GetStatusArgs{
    TStruct:thrift.NewTStruct("getStatus_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetStatusArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetStatusArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getStatus_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetStatusArgs) TStructName() string {
  return "GetStatusArgs"
}

func (p *GetStatusArgs) ThriftName() string {
  return "getStatus_args"
}

func (p *GetStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetStatusArgs(%+v)", *p)
}

func (p *GetStatusArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetStatusArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetStatusArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetStatusArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetStatusResult struct {
  thrift.TStruct
  Success Status "success"; // 0
}

func NewGetStatusResult() *GetStatusResult {
  output := &GetStatusResult{
    TStruct:thrift.NewTStruct("getStatus_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetStatusResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetStatusResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v72, err73 := iprot.ReadI32()
  if err73 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err73); }
  p.Success = Status(v72)
  return err
}

func (p *GetStatusResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetStatusResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getStatus_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetStatusResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetStatusResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetStatusResult) TStructName() string {
  return "GetStatusResult"
}

func (p *GetStatusResult) ThriftName() string {
  return "getStatus_result"
}

func (p *GetStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetStatusResult(%+v)", *p)
}

func (p *GetStatusResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetStatusResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetStatusResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetStatusResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}

type GetStatusDetailsArgs struct {
  thrift.TStruct
}

func NewGetStatusDetailsArgs() *GetStatusDetailsArgs {
  output := &GetStatusDetailsArgs{
    TStruct:thrift.NewTStruct("getStatusDetails_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetStatusDetailsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetStatusDetailsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getStatusDetails_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetStatusDetailsArgs) TStructName() string {
  return "GetStatusDetailsArgs"
}

func (p *GetStatusDetailsArgs) ThriftName() string {
  return "getStatusDetails_args"
}

func (p *GetStatusDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetStatusDetailsArgs(%+v)", *p)
}

func (p *GetStatusDetailsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetStatusDetailsArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetStatusDetailsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetStatusDetailsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetStatusDetailsResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetStatusDetailsResult() *GetStatusDetailsResult {
  output := &GetStatusDetailsResult{
    TStruct:thrift.NewTStruct("getStatusDetails_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetStatusDetailsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetStatusDetailsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v74, err75 := iprot.ReadString()
  if err75 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err75); }
  p.Success = v74
  return err
}

func (p *GetStatusDetailsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetStatusDetailsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getStatusDetails_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetStatusDetailsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetStatusDetailsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetStatusDetailsResult) TStructName() string {
  return "GetStatusDetailsResult"
}

func (p *GetStatusDetailsResult) ThriftName() string {
  return "getStatusDetails_result"
}

func (p *GetStatusDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetStatusDetailsResult(%+v)", *p)
}

func (p *GetStatusDetailsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetStatusDetailsResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetStatusDetailsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetStatusDetailsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

type GetCountersArgs struct {
  thrift.TStruct
}

func NewGetCountersArgs() *GetCountersArgs {
  output := &GetCountersArgs{
    TStruct:thrift.NewTStruct("getCounters_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetCountersArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCountersArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getCounters_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCountersArgs) TStructName() string {
  return "GetCountersArgs"
}

func (p *GetCountersArgs) ThriftName() string {
  return "getCounters_args"
}

func (p *GetCountersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCountersArgs(%+v)", *p)
}

func (p *GetCountersArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetCountersArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetCountersArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetCountersArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetCountersResult struct {
  thrift.TStruct
  Success thrift.TMap "success"; // 0
}

func NewGetCountersResult() *GetCountersResult {
  output := &GetCountersResult{
    TStruct:thrift.NewTStruct("getCounters_result", []thrift.TField{
    thrift.NewTField("success", thrift.MAP, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetCountersResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCountersResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype79, _vtype80, _size78, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTMap(_ktype79, _vtype80, _size78)
  for _i82:= 0; _i82 < _size78; _i82++ {
    v85, err86 := iprot.ReadString()
    if err86 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key83", "", err86); }
    _key83 := v85
    v87, err88 := iprot.ReadI64()
    if err88 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val84", "", err88); }
    _val84 := v87
    p.Success.Set(_key83, _val84)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *GetCountersResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetCountersResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getCounters_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCountersResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.I64, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter89 := range p.Success.Iter() {
      Kiter90, Viter91 := Miter89.Key().(string), Miter89.Value().(int64)
      err = oprot.WriteString(string(Kiter90))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter90", "", err); }
      err = oprot.WriteI64(int64(Viter91))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter91", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetCountersResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetCountersResult) TStructName() string {
  return "GetCountersResult"
}

func (p *GetCountersResult) ThriftName() string {
  return "getCounters_result"
}

func (p *GetCountersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCountersResult(%+v)", *p)
}

func (p *GetCountersResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetCountersResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetCountersResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetCountersResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.MAP, 0),
    })
}

/**
 * Attributes:
 *  - Key
 */
type GetCounterArgs struct {
  thrift.TStruct
  Key string "key"; // 1
}

func NewGetCounterArgs() *GetCounterArgs {
  output := &GetCounterArgs{
    TStruct:thrift.NewTStruct("getCounter_args", []thrift.TField{
    thrift.NewTField("key", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetCounterArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "key" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCounterArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v92, err93 := iprot.ReadString()
  if err93 != nil { return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err93); }
  p.Key = v92
  return err
}

func (p *GetCounterArgs) ReadFieldKey(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetCounterArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getCounter_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCounterArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Key))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err); }
  return err
}

func (p *GetCounterArgs) WriteFieldKey(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetCounterArgs) TStructName() string {
  return "GetCounterArgs"
}

func (p *GetCounterArgs) ThriftName() string {
  return "getCounter_args"
}

func (p *GetCounterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCounterArgs(%+v)", *p)
}

func (p *GetCounterArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetCounterArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetCounterArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Key
  }
  return nil
}

func (p *GetCounterArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("key", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetCounterResult struct {
  thrift.TStruct
  Success int64 "success"; // 0
}

func NewGetCounterResult() *GetCounterResult {
  output := &GetCounterResult{
    TStruct:thrift.NewTStruct("getCounter_result", []thrift.TField{
    thrift.NewTField("success", thrift.I64, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetCounterResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCounterResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v94, err95 := iprot.ReadI64()
  if err95 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err95); }
  p.Success = v94
  return err
}

func (p *GetCounterResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetCounterResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getCounter_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCounterResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I64, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetCounterResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetCounterResult) TStructName() string {
  return "GetCounterResult"
}

func (p *GetCounterResult) ThriftName() string {
  return "getCounter_result"
}

func (p *GetCounterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCounterResult(%+v)", *p)
}

func (p *GetCounterResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetCounterResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetCounterResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetCounterResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I64, 0),
    })
}

/**
 * Attributes:
 *  - Key
 *  - Value
 */
type SetOptionArgs struct {
  thrift.TStruct
  Key string "key"; // 1
  Value string "value"; // 2
}

func NewSetOptionArgs() *SetOptionArgs {
  output := &SetOptionArgs{
    TStruct:thrift.NewTStruct("setOption_args", []thrift.TField{
    thrift.NewTField("key", thrift.STRING, 1),
    thrift.NewTField("value", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *SetOptionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "key" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetOptionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v96, err97 := iprot.ReadString()
  if err97 != nil { return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err97); }
  p.Key = v96
  return err
}

func (p *SetOptionArgs) ReadFieldKey(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SetOptionArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v98, err99 := iprot.ReadString()
  if err99 != nil { return thrift.NewTProtocolExceptionReadField(2, "value", p.ThriftName(), err99); }
  p.Value = v98
  return err
}

func (p *SetOptionArgs) ReadFieldValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SetOptionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("setOption_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetOptionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Key))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err); }
  return err
}

func (p *SetOptionArgs) WriteFieldKey(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SetOptionArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err); }
  return err
}

func (p *SetOptionArgs) WriteFieldValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SetOptionArgs) TStructName() string {
  return "SetOptionArgs"
}

func (p *SetOptionArgs) ThriftName() string {
  return "setOption_args"
}

func (p *SetOptionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetOptionArgs(%+v)", *p)
}

func (p *SetOptionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetOptionArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *SetOptionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Key
  case 2: return p.Value
  }
  return nil
}

func (p *SetOptionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("key", thrift.STRING, 1),
    thrift.NewTField("value", thrift.STRING, 2),
    })
}

type SetOptionResult struct {
  thrift.TStruct
}

func NewSetOptionResult() *SetOptionResult {
  output := &SetOptionResult{
    TStruct:thrift.NewTStruct("setOption_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *SetOptionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SetOptionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("setOption_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SetOptionResult) TStructName() string {
  return "SetOptionResult"
}

func (p *SetOptionResult) ThriftName() string {
  return "setOption_result"
}

func (p *SetOptionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetOptionResult(%+v)", *p)
}

func (p *SetOptionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SetOptionResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *SetOptionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *SetOptionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Key
 */
type GetOptionArgs struct {
  thrift.TStruct
  Key string "key"; // 1
}

func NewGetOptionArgs() *GetOptionArgs {
  output := &GetOptionArgs{
    TStruct:thrift.NewTStruct("getOption_args", []thrift.TField{
    thrift.NewTField("key", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetOptionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "key" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetOptionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v100, err101 := iprot.ReadString()
  if err101 != nil { return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err101); }
  p.Key = v100
  return err
}

func (p *GetOptionArgs) ReadFieldKey(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetOptionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getOption_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetOptionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("key", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Key))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err); }
  return err
}

func (p *GetOptionArgs) WriteFieldKey(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetOptionArgs) TStructName() string {
  return "GetOptionArgs"
}

func (p *GetOptionArgs) ThriftName() string {
  return "getOption_args"
}

func (p *GetOptionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetOptionArgs(%+v)", *p)
}

func (p *GetOptionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetOptionArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetOptionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Key
  }
  return nil
}

func (p *GetOptionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("key", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetOptionResult struct {
  thrift.TStruct
  Success string "success"; // 0
}

func NewGetOptionResult() *GetOptionResult {
  output := &GetOptionResult{
    TStruct:thrift.NewTStruct("getOption_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetOptionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetOptionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v102, err103 := iprot.ReadString()
  if err103 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err103); }
  p.Success = v102
  return err
}

func (p *GetOptionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetOptionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getOption_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetOptionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetOptionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetOptionResult) TStructName() string {
  return "GetOptionResult"
}

func (p *GetOptionResult) ThriftName() string {
  return "getOption_result"
}

func (p *GetOptionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetOptionResult(%+v)", *p)
}

func (p *GetOptionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetOptionResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetOptionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetOptionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    })
}

type GetOptionsArgs struct {
  thrift.TStruct
}

func NewGetOptionsArgs() *GetOptionsArgs {
  output := &GetOptionsArgs{
    TStruct:thrift.NewTStruct("getOptions_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetOptionsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetOptionsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getOptions_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetOptionsArgs) TStructName() string {
  return "GetOptionsArgs"
}

func (p *GetOptionsArgs) ThriftName() string {
  return "getOptions_args"
}

func (p *GetOptionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetOptionsArgs(%+v)", *p)
}

func (p *GetOptionsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetOptionsArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetOptionsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetOptionsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetOptionsResult struct {
  thrift.TStruct
  Success thrift.TMap "success"; // 0
}

func NewGetOptionsResult() *GetOptionsResult {
  output := &GetOptionsResult{
    TStruct:thrift.NewTStruct("getOptions_result", []thrift.TField{
    thrift.NewTField("success", thrift.MAP, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetOptionsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetOptionsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype107, _vtype108, _size106, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTMap(_ktype107, _vtype108, _size106)
  for _i110:= 0; _i110 < _size106; _i110++ {
    v113, err114 := iprot.ReadString()
    if err114 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key111", "", err114); }
    _key111 := v113
    v115, err116 := iprot.ReadString()
    if err116 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val112", "", err116); }
    _val112 := v115
    p.Success.Set(_key111, _val112)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *GetOptionsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetOptionsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getOptions_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetOptionsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter117 := range p.Success.Iter() {
      Kiter118, Viter119 := Miter117.Key().(string), Miter117.Value().(string)
      err = oprot.WriteString(string(Kiter118))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter118", "", err); }
      err = oprot.WriteString(string(Viter119))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter119", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetOptionsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetOptionsResult) TStructName() string {
  return "GetOptionsResult"
}

func (p *GetOptionsResult) ThriftName() string {
  return "getOptions_result"
}

func (p *GetOptionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetOptionsResult(%+v)", *p)
}

func (p *GetOptionsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetOptionsResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *GetOptionsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetOptionsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.MAP, 0),
    })
}

type UptimeArgs struct {
  thrift.TStruct
}

func NewUptimeArgs() *UptimeArgs {
  output := &UptimeArgs{
    TStruct:thrift.NewTStruct("uptime_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *UptimeArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *UptimeArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("uptime_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *UptimeArgs) TStructName() string {
  return "UptimeArgs"
}

func (p *UptimeArgs) ThriftName() string {
  return "uptime_args"
}

func (p *UptimeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UptimeArgs(%+v)", *p)
}

func (p *UptimeArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*UptimeArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *UptimeArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *UptimeArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 */
type UptimeResult struct {
  thrift.TStruct
  Success int64 "success"; // 0
}

func NewUptimeResult() *UptimeResult {
  output := &UptimeResult{
    TStruct:thrift.NewTStruct("uptime_result", []thrift.TField{
    thrift.NewTField("success", thrift.I64, 0),
    }),
  }
  {
  }
  return output
}

func (p *UptimeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *UptimeResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v120, err121 := iprot.ReadI64()
  if err121 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err121); }
  p.Success = v120
  return err
}

func (p *UptimeResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *UptimeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("uptime_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *UptimeResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I64, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *UptimeResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *UptimeResult) TStructName() string {
  return "UptimeResult"
}

func (p *UptimeResult) ThriftName() string {
  return "uptime_result"
}

func (p *UptimeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UptimeResult(%+v)", *p)
}

func (p *UptimeResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*UptimeResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *UptimeResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *UptimeResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I64, 0),
    })
}

type ShutdownArgs struct {
  thrift.TStruct
}

func NewShutdownArgs() *ShutdownArgs {
  output := &ShutdownArgs{
    TStruct:thrift.NewTStruct("shutdown_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *ShutdownArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ShutdownArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("shutdown_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ShutdownArgs) TStructName() string {
  return "ShutdownArgs"
}

func (p *ShutdownArgs) ThriftName() string {
  return "shutdown_args"
}

func (p *ShutdownArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShutdownArgs(%+v)", *p)
}

func (p *ShutdownArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ShutdownArgs)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ShutdownArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *ShutdownArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

type ShutdownResult struct {
  thrift.TStruct
}

func NewShutdownResult() *ShutdownResult {
  output := &ShutdownResult{
    TStruct:thrift.NewTStruct("shutdown_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *ShutdownResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ShutdownResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("shutdown_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ShutdownResult) TStructName() string {
  return "ShutdownResult"
}

func (p *ShutdownResult) ThriftName() string {
  return "shutdown_result"
}

func (p *ShutdownResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShutdownResult(%+v)", *p)
}

func (p *ShutdownResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ShutdownResult)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ShutdownResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *ShutdownResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}


